!async function(){for(;!Spicetify.React||!Spicetify.ReactDOM;)await new Promise(e=>setTimeout(e,10));var t,e;t={ru:{error:"Ошибка",text:"Скопировать текст",songAndArtist:"Cкопировать трек и артиста",copied:"Скопировано"},en:{error:"Error",text:"Copy Text",songAndArtist:"Copy Song & Artist names",copied:"Copied"}},e=async function(){for(;!Spicetify||"complete"!==document.readyState;)await new Promise(e=>setTimeout(e,1e3));i()},(async()=>{await e()})();async function c(e){var t=Spicetify.GraphQL.Definitions["getTrackName"];try{var i=(await Spicetify.GraphQL.Request(t,{uri:e,offset:0,limit:10}))["data"];return i.trackUnion.name}catch(e){throw console.log(e),new Error(e.message)}}function i(){function s(e){e&&(Spicetify.showNotification(o.copied+": "+e),Spicetify.Platform.ClipboardAPI.copy(e))}var e;e=Spicetify.Locale?Spicetify.Locale.getLocale():"en";const o=Object.keys(t).includes(e)?t[e]:t.en;new Spicetify.ContextMenu.Item(o.text,async e=>{var t=Spicetify.URI["Type"],i=Spicetify.URI.fromString(e[0]);const a=i._base62Id||i.id;try{switch(i.type){case t.TRACK:s(await c(i.toURI()));break;case t.LOCAL:var r=[];i.track&&r.push(i.track),i.artist&&r.push(i.artist),i.album&&r.push(i.album),s(r.join("; "));break;case t.LOCAL_ARTIST:s(""+(i.artist||""));break;case t.LOCAL_ALBUM:s(""+(i.album||""));break;case t.ALBUM:s(await async function(e){try{return(await Spicetify.CosmosAsync.get("https://api.spotify.com/v1/albums/"+e)).name}catch(e){throw console.log(e),new Error(e.message)}}(i.id));break;case t.ARTIST:s(await async function(e){var t=Spicetify.GraphQL.Definitions["queryArtistMinimal"];try{var i=(await Spicetify.GraphQL.Request(t,{uri:e,offset:0,limit:10}))["data"];return i.artistUnion.profile.name}catch(e){throw console.log(e),new Error(e.message)}}(i.toURI()));break;case t.PLAYLIST:case t.PLAYLIST_V2:s((await Spicetify.CosmosAsync.get("sp://core-playlist/v1/playlist/spotify:playlist:"+a)).playlist.name);break;case t.SHOW:s((await Spicetify.CosmosAsync.get(`sp://core-show/v1/shows/${a}?responseFormat=protobufJson`)).header.showMetadata.name);break;case t.EPISODE:s((await Spicetify.Platform.ShowAPI.getEpisodeOrChapter("spotify:episode:"+a)).name);break;case t.PROFILE:s((await Spicetify.CosmosAsync.get("sp://core-profile/v1/profiles",{usernames:i.username})).profiles[0].name);break;case t.FOLDER:s((await Spicetify.Platform.RootlistAPI.getContents()).items.filter(e=>"folder"===e.type&&e.uri.includes(a))[0].name)}}catch(e){Spicetify.showNotification(o.error+": "+e.message)}},e=>{if(1!==e.length)return!1;var t=Spicetify.URI["Type"];switch(Spicetify.URI.fromString(e[0]).type){case t.TRACK:case t.LOCAL:case t.LOCAL_ARTIST:case t.LOCAL_ALBUM:case t.ALBUM:case t.ARTIST:case t.PLAYLIST:case t.PLAYLIST_V2:case t.SHOW:case t.EPISODE:case t.PROFILE:case t.FOLDER:return!0;default:return!1}},"copy").register(),new Spicetify.ContextMenu.Item(o.songAndArtist,async e=>{var t,i,a=Spicetify.URI["Type"],e=Spicetify.URI.fromString(e[0]);try{e.type===a.TRACK&&([t,i]=await Promise.allSettled([c(e.toURI()),async function(e){var t=Spicetify.GraphQL.Definitions["queryTrackArtists"];try{var i=(await Spicetify.GraphQL.Request(t,{uri:e,offset:0,limit:10}))["data"];return i.trackUnion.artists.items.map(e=>e.profile.name).join(", ")}catch(e){throw console.log(e),new Error(e.message)}}(e.toURI())]),"fulfilled"===t.status)&&"fulfilled"===i.status&&s(t.value+"; "+i.value)}catch(e){Spicetify.showNotification(o.error+": "+e.message)}},e=>{var t;return 1===e.length&&(t=Spicetify.URI["Type"],Spicetify.URI.fromString(e[0]).type===t.TRACK)},"artist").register()}}();